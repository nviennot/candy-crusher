#!/usr/bin/env ruby
$:.unshift "#{File.expand_path File.dirname(__FILE__)}/../lib"
require "candy-crusher"

require 'optparse'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: candy-crusher [options]"

  opts.on("-S", "--screen x,y,w,h", Array) do |x,y,w,h|
    options[:screen] = [x,y,w,h].map(&:to_i)
  end

  opts.on("-F", "--file path", String) do |path|
    options[:file] = path
  end

  opts.on("-G", "--grid-offset x,y", Array) do |x,y|
    options[:grid] = [x,y].map(&:to_i)
  end

  opts.on("-L", "--layout i,j,i_max,j_max", Array) do |i,j,i_max,j_max|
    options[:layouts] ||= []
    options[:layouts] << [i,j,i_max,j_max].map(&:to_i)
  end

  opts.on("-C", "--connector i,j,other_i,other_j", Array) do |i,j,other_i,other_j|
    options[:connectors] ||= []
    options[:connectors] << [i,j,other_i,other_j].map(&:to_i)
  end

  opts.on("-d", "--max-depth i", Integer) do |i|
    options[:max_depth] = i
  end

  opts.on("-t", "--max-time t", Integer) do |t|
    options[:max_time] = t
  end

  opts.on("-v", "--verbose") do
    options[:verbose] = true
  end

  opts.on("-s", "--set i,j,other_i,other_j,what", Array) do |i,j,other_i,other_j,what|
    options[:set] ||= []
    options[:set] << [i.to_i, j.to_i, other_i.to_i, other_j.to_i, what]
  end
end.parse!

print "Capture Screen..."
if options[:file]
  screen = ChunkyPNG::Image.from_file(options[:file])
else
  screen = CandyCrusher::ScreenCapture.new(*options[:screen]).capture
  screen.save('/tmp/capture.png')
end
puts " Done"

print "Analyze Grid..."
grid = CandyCrusher::Grid.get_grid(screen, options)
puts " Done"

puts "Computing Moves..."

options[:max_depth] ||= 15
options[:max_time]  ||= 10
moves = CandyCrusher::Logic.new.compute_best_move(grid, :max_depth => options[:max_depth],
                                                        :end_time  => Time.now + options[:max_time])
puts " Done"

if moves.empty?
  puts grid
  puts "can't find a move :("
  exit 1
end

def print_move(opt={})
  options = {}
  options[:highlight] = [[opt[:swap][0], opt[:swap][1]],
                         [opt[:swap][2], opt[:swap][3]]] if opt[:swap]

  if opt[:combos]
    combos = opt[:combos].sort_by { |c| c == :normal ? 0 : 1 }.group_by { |c| c }
      .map { |c,v| "#{v.count}x #{c == :normal ? c : "\e[1;31m#{c}\e[0m"}" }
      .join(", ")
  end

  options[:text] = []
  options[:text] << "Combos: #{combos}" if combos
  options[:text] << "Score:  #{opt[:score].to_f.round(2)}" if opt[:score]

  puts opt[:grid].to_s(options)
end

moves.each_with_index do |move, index|
  if options[:verbose] || index == 0
    print_move(move.merge(:grid => move[:old_grid]))
  end
end

print_move(:grid => moves.last[:new_grid])
